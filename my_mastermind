#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#define CODE_LENGTH 4
#define MAX_ATTEMPTS 10
#define PIECES "012345678"

void generateRandomCode(char* code) {
    int i;
    int len = strlen(PIECES);
    for (i = 0; i < CODE_LENGTH; i++) {
        code[i] = PIECES[rand() % len];
    }
    code[i] = '\0';
}

void evaluateGuess(const char* code, const char* guess, int* wellPlaced, int* misplaced) {
    int codeCount[10] = {0};
    int guessCount[10] = {0};
    *wellPlaced = 0;
    *misplaced = 0;

    for (int i = 0; i < CODE_LENGTH; i++) {
        if (code[i] == guess[i]) {
            (*wellPlaced)++;
        } else {
            codeCount[code[i] - '0']++;
            guessCount[guess[i] - '0']++;
        }
    }

    for (int i = 0; i < 10; i++) {
        *misplaced += (codeCount[i] < guessCount[i]) ? codeCount[i] : guessCount[i];
    }
}

int isValidGuess(const char* guess) {
    if (strlen(guess) != CODE_LENGTH) {
        return 0;
    }
    for (int i = 0; i < CODE_LENGTH; i++) {
        if (strchr(PIECES, guess[i]) == NULL) {
            return 0;
        }
    }
    return 1;
}

int main(int argc, char* argv[]) {
    // Read command-line arguments
    char* secretCode = NULL;
    int maxAttempts = MAX_ATTEMPTS;

    for (int i = 1; i < argc; i++) {
        if (strcmp(argv[i], "-c") == 0 && i + 1 < argc) {
            secretCode = argv[i + 1];
            i++;
        } else if (strcmp(argv[i], "-t") == 0 && i + 1 < argc) {
            maxAttempts = atoi(argv[i + 1]);
            i++;
        }
    }

    // Generate random code if not provided
    char code[CODE_LENGTH + 1];
    if (secretCode == NULL) {
        srand(time(NULL));
        generateRandomCode(code);
        secretCode = code;
    }

    printf("Will you find the secret code?\nPlease enter a valid guess\n");

    int round = 0;
    int won = 0;

    while (round < maxAttempts) {
        char guess[CODE_LENGTH + 1];
        int wellPlaced, misplaced;

        printf("---\nRound %d\n>", round);

        if (read(0, guess, CODE_LENGTH + 1) == -1) {
            break;
        }

        guess[CODE_LENGTH] = '\0';

        if (!isValidGuess(guess)) {
            printf("Wrong input!\n");
            continue;
        }

        evaluateGuess(secretCode, guess, &wellPlaced, &misplaced);

        printf("Well placed pieces: %d\nMisplaced pieces: %d\n", wellPlaced, misplaced);

        if (wellPlaced == CODE_LENGTH) {
            won = 1;
            break;
        }

        round++;
    }

    if (won) {
        printf("Congratz! You did it!\n");
    } else {
        printf("Game over! You couldn't find the secret code.\n");
    }

    return 0;
}

